### Problem 1
df <- MPV::table.b4
### Problem 2
df <- MPV::table.b11
### Problem 1
df <- MPV::table.b4
nrow(df)
n <- 14
set.seed(1); chosen_rows <- sort(sample(seq(1,24), n))
MPV::table.b11
### Problem 1
df <- MPV::table.b4
n <- 14
set.seed(1); chosen_rows <- sort(sample(seq(1,24), n))
ncol(df)
### Problem 1
df <- MPV::table.b4
n <- 14; k <- 5
set.seed(1); chosen_rows <- sort(sample(seq(1, nrow(df)), n))
set.seed(1); chosen_cols <- sort(sample(seq(1, ncol(df)), k))
chosen_rows
chosen_cols
### Problem 2
df <- MPV::table.b11
n <- 14
set.seed(2); chosen_rows <- sort(sample(seq(1,nrow(df)), n))
chosen_rows
### Problem 1
df <- MPV::table.b4
n <- 14; k <- 5
set.seed(1); chosen_rows <- sort(sample(seq(1, nrow(df)), n))
set.seed(1); chosen_cols <- sort(sample(seq(1, ncol(df)), k))
chosen_rows
chosen_cols
df[chosen_rows, chosen_cols]
df
head(df)
df[chosen_rows, chosen_cols + 1]
df[chosen_rows, c(0, chosen_cols + 1)]
df[chosen_rows, chosen_cols]
X <- df[chosen_rows, chosen_cols + 1]
ones <- rep(1, n)
X <- cbind(ones, X)
X
y <- df[,1]
y
head(df)
2^5
### Problem 2
df <- MPV::table.b11
head(df)
2^6
### Problem 1
df <- MPV::table.b4
n <- 14; k <- 5
set.seed(1); chosen_rows <- sort(sample(seq(1, nrow(df)), n))
set.seed(1); chosen_cols <- sort(sample(seq(1, ncol(df)), k))
X <- df[chosen_rows, chosen_cols + 1]
ones <- rep(1, n)
X <- cbind(ones, X)
y <- df[,1]
chosen_cols
chosen_cols + 1
c(1, chosen_cols + 1)
df1 <- [chosen_rows, c(1, chosen_cols + 1)]
df1 <- df[chosen_rows, c(1, chosen_cols + 1)]
df1
library(leaps)
best1 <- regsubsets(x = df1$y~., data = df1)
best1
best1 <- regsubsets(x = df1$y~., data = df1, nbest = 1, nvmax = 16)
best1
summary(best1)
df1
?regsubsets
library(leaps)
### Problem 1
df <- MPV::table.b4
n <- 14; k <- 5
set.seed(1); chosen_rows <- sort(sample(seq(1, nrow(df)), n))
set.seed(1); chosen_cols <- sort(sample(seq(1, ncol(df)), k))
X <- df[chosen_rows, chosen_cols + 1]
ones <- rep(1, n)
X <- cbind(ones, X)
y <- df[,1]
# df1 <- df[chosen_rows, c(1, chosen_cols + 1)]
# best1 <- regsubsets(x = df1$y~., data = df1, nbest = 1, nvmax = 16)
best1 <- regsubsets(x = X, y = y, data = df1, nbest = 1, nvmax = 16)
# df1 <- df[chosen_rows, c(1, chosen_cols + 1)]
# best1 <- regsubsets(x = df1$y~., data = df1, nbest = 1, nvmax = 16)
best1 <- regsubsets(x = X, y = y, nbest = 1, nvmax = 16)
x
X
y
length(y)
nrow(X)
y <- df[chosen_rows,1]
# df1 <- df[chosen_rows, c(1, chosen_cols + 1)]
# best1 <- regsubsets(x = df1$y~., data = df1, nbest = 1, nvmax = 16)
best1 <- regsubsets(x = X, y = y, nbest = 1, nvmax = 16)
summary(best1)
X
X <- df[chosen_rows, chosen_cols + 1]
# df1 <- df[chosen_rows, c(1, chosen_cols + 1)]
# best1 <- regsubsets(x = df1$y~., data = df1, nbest = 1, nvmax = 16)
best1 <- regsubsets(x = X, y = y, nbest = 1, nvmax = 16)
summary(best1)
X
# df1 <- df[chosen_rows, c(1, chosen_cols + 1)]
# best1 <- regsubsets(x = df1$y~., data = df1, nbest = 1, nvmax = 16)
best1 <- regsubsets(x = X, y = y, nbest = 10, nvmax = 16)
summary(best1)
# df1 <- df[chosen_rows, c(1, chosen_cols + 1)]
# best1 <- regsubsets(x = df1$y~., data = df1, nbest = 1, nvmax = 16)
best1 <- regsubsets(x = X, y = y, nbest = 10, nvmax = 16)
summary(best1)
sum_best1 <-summary(best1)
sum_best1$which
sse <- sum_best1$rss
p.m <- 2:6
aic <- n * log(sse) + 2 * p.m - n * log(n)
n * log(sse)
p.m
n * log(sse)
2 * p.m
sum_best1$which
library(leaps)
### Problem 1
df <- MPV::table.b4
n <- 14; k <- 5
set.seed(1); chosen_rows <- sort(sample(seq(1, nrow(df)), n))
set.seed(1); chosen_cols <- sort(sample(seq(1, ncol(df)), k))
X <- df[chosen_rows, chosen_cols + 1]
ones <- rep(1, n)
X <- cbind(ones, X)
y <- df[chosen_rows,1]
# df1 <- df[chosen_rows, c(1, chosen_cols + 1)]
# best1 <- regsubsets(x = df1$y~., data = df1, nbest = 1, nvmax = 16)
best1 <- regsubsets(x = X, y = y, nbest = 10, nvmax = 16)
library(leaps)
### Problem 1
df <- MPV::table.b4
n <- 14; k <- 5
set.seed(1); chosen_rows <- sort(sample(seq(1, nrow(df)), n))
set.seed(1); chosen_cols <- sort(sample(seq(1, ncol(df)), k))
X <- df[chosen_rows, chosen_cols + 1]
ones <- rep(1, n)
X <- cbind(ones, X)
y <- df[chosen_rows,1]
df1 <- df[chosen_rows, c(1, chosen_cols + 1)]
df1
best1 <- regsubsets(x = y~., data = df1, nvmax = 5)
best1
summary(best1)
res.sum <- summary(best1)
data.frame(
Adj.R2 = which.max(res.sum$adjr2),
CP = which.min(res.sum$cp),
BIC = which.min(res.sum$bic)
)
res.sum
res.sum$rsq
data.frame(
Adj.R2 = which.max(res.sum$adjr2),
CP = which.min(res.sum$cp),
BIC = which.min(res.sum$bic)
)
res.sum$rss
res.sum$rss
p.m <- 2:6
p.m
n * log(res.sum$rss / n) + 2 * p.m
aic <- n * log(res.sum$rss / n) + 2 * p.m
data.frame(
Adj.R2 = which.max(res.sum$adjr2),
CP = which.min(res.sum$cp),
BIC = which.min(res.sum$bic),
AIC = which.min(aic)
)
aic
### Problem 2
df <- MPV::table.b11
n <- 14
set.seed(2); chosen_rows <- sort(sample(seq(1,nrow(df)), n))
df2 <- df[chosen_rows,]
df2
ncol(df2)
best2 <- regsubsets(x = Quality~., data = df2, nvmax = 6)
res.sum <- summary(best2)
p.m <- 2:7
aic <- n * log(res.sum$rss / n) + 2 * p.m
data.frame(
Adj.R2 = which.max(res.sum$adjr2),
CP = which.min(res.sum$cp),
BIC = which.min(res.sum$bic),
AIC = which.min(aic)
)
res.sum
colnames(df)
data.frame(
Adj.R2 = which.max(res.sum$adjr2),
CP = which.min(res.sum$cp),
BIC = which.min(res.sum$bic),
AIC = which.min(aic)
)
res.sum$cp
df
colnames(df2)
df2$Region
unique(df2$Region)
lm(formula = y ~ Clarity + Aroma + Body + Flavor + Oakiness +
I(Region ==1) + I(Region ==2) + I(Region ==3), data = df2)
m1 = lm(formula = y ~ Clarity + Aroma + Body + Flavor + Oakiness +
I(Region ==1) + I(Region ==2) + I(Region ==3), data = df2)
summary(m1)
df2
m1 = lm(formula = Quality ~ Clarity + Aroma + Body + Flavor + Oakiness +
I(Region ==1) + I(Region ==2) + I(Region ==3), data = df2)
summary(m1)
# best2 <- regsubsets(x = Quality~., data = df2, nvmax = 6)
best2 <- regsubsets(x = Quality ~ Clarity + Aroma + Body + Flavor + Oakiness +
I(Region ==1) + I(Region ==2) + I(Region ==3), data = df2, nvmax = 6)
res.sum <- summary(best2)
res.sum
# best2 <- regsubsets(x = Quality~., data = df2, nvmax = 6)
best2 <- regsubsets(x = Quality ~ Clarity + Aroma + Body + Flavor + Oakiness +
I(Region ==1) + I(Region ==2) + I(Region ==3), data = df2, nvmax = 8)
res.sum <- summary(best2)
res.sum
p.m <- 2:9
aic <- n * log(res.sum$rss / n) + 2 * p.m
data.frame(
Adj.R2 = which.max(res.sum$adjr2),
CP = which.min(res.sum$cp),
BIC = which.min(res.sum$bic),
AIC = which.min(aic)
)
m1 = lm(formula = Quality ~ Clarity + Aroma + Body + Flavor + Oakiness +
I(Region ==1) + I(Region ==2) + I(Region ==3), data = df2)
summary(m1)
# best2 <- regsubsets(x = Quality~., data = df2, nvmax = 6)
# Reference: https://stats.idre.ucla.edu/r/modules/coding-for-categorical-variables-in-regression-models/
best2 <- regsubsets(x = Quality ~ Clarity + Aroma + Body + Flavor + Oakiness +
I(Region ==1) + I(Region ==2) + I(Region ==3), data = df2, nvmax = 7)
res.sum <- summary(best2)
p.m <- 2:9
aic <- n * log(res.sum$rss / n) + 2 * p.m
data.frame(
Adj.R2 = which.max(res.sum$adjr2),
CP = which.min(res.sum$cp),
BIC = which.min(res.sum$bic),
AIC = which.min(aic)
)
p.m <- 2:8
aic <- n * log(res.sum$rss / n) + 2 * p.m
data.frame(
Adj.R2 = which.max(res.sum$adjr2),
CP = which.min(res.sum$cp),
BIC = which.min(res.sum$bic),
AIC = which.min(aic)
)
res.sum
res.sum
# best2 <- regsubsets(x = Quality~., data = df2, nvmax = 6)
# Reference: https://stats.idre.ucla.edu/r/modules/coding-for-categorical-variables-in-regression-models/
best2 <- regsubsets(x = Quality ~ Clarity + Aroma + Body + Flavor + Oakiness +
I(Region ==1) + I(Region ==2) + I(Region ==3), data = df2, nvmax = 8)
res.sum <- summary(best2)
res.sum
data.frame(
Adj.R2 = which.max(res.sum$adjr2),
CP = which.min(res.sum$cp),
BIC = which.min(res.sum$bic),
AIC = which.min(aic)
)
res.sum$cp
