### Problem 1
df <- MPV::table.b2
df
### Problem 1
df <- MPV::table.b2
head(df)
set.seed(1); chosen_rows <- sort(sample(seq(1, nrow(df)), n))
n <- 20; k <- 5
set.seed(1); chosen_rows <- sort(sample(seq(1, nrow(df)), n))
chosen_rows
df1 <- df[chosen_rows, c(1, chosen_cols + 1)]
df1 <- df[chosen_rows,]
head(df1)
### Problem 2
df <- MPV::table.b1
### Problem 2
df <- MPV::table.b1
n <- 20
set.seed(1); chosen_rows <- sort(sample(seq(1, nrow(df)), n))
chosen_rows
?MASS::stepAIC
df1
head()
head(df1)
# (d) all possible regressions
best1 <- regsubsets(x = y~., data = df1, nvmax = 5)
# (d) all possible regressions
best1 <- leaps::regsubsets(x = y~., data = df1, nvmax = 5)
best1
best1_sum <- summary(best1)
best1_sum
p.m <- 2:6
p.m <- 2:6
aic <- n * log(best1_sum$rss / n) + 2 * p.m
data.frame(
Adj.R2 = which.max(best1_sum$adjr2),
CP = which.min(best1_sum$cp),
BIC = which.min(best1_sum$bic),
AIC = which.min(aic)
)
# (a) forward selection
?MASS::step
# (a) forward selection
model_0 <- lm(y~1, data = df1)
model_1 <- lm(y~., data = df1)
forward1 <- MASS::stepAIC(model_0,
scope = list(upper=model_1, lower=model_0),
direction = c('forward'))
forward1
# (b) backward elimination
backward1 <- MASS::stepAIC(model_0,
scope = list(upper=model_1, lower=model_0),
direction = c('backward'))
backward1
# (b) backward elimination
backward1 <- MASS::stepAIC(model_1,
scope = list(upper=model_1, lower=model_0),
direction = c('backward'))
# (b) backward elimination
backward1 <- MASS::stepAIC(model_1,
# scope = list(upper=model_1, lower=model_0),
direction = c('backward'))
# (c) stepwise regression
step1 <- MASS::stepAIC(model_0,
scope = list(upper=model_1, lower=model_0),
direction = c('both'))
chosen_rows
forward1
forward1 <- MASS::stepAIC(model_0,
scope = list(upper=model_1, lower=model_0),
direction = c('forward'))
# (b) backward elimination
backward1 <- MASS::stepAIC(model_1,
# scope = list(upper=model_1, lower=model_0),
direction = c('backward'))
length(forward1)
forward1[[1]]
forward1[[2]]
forward1[[3]]
forward1[[4]]
forward1[[5]]
forward1[[13]]
forward1[[12]]
forward1[[11]]
forward1[[10]]
forward1[[9]]
forward1[[8]]
forward1[[6]]
forward1[[7]]
step1
# (c) stepwise regression
step1 <- MASS::stepAIC(model_0,
scope = list(upper=model_1, lower=model_0),
direction = c('both'))
# (d) all possible regressions
best1 <- leaps::regsubsets(x = y~., data = df1, nvmax = 5)
# (d) all possible regressions
best1 <- leaps::regsubsets(x = y~., data = df1, nvmax = 5)
best1_sum <- summary(best1)
p.m <- 2:6
aic <- n * log(best1_sum$rss / n) + 2 * p.m
data.frame(
Adj.R2 = which.max(best1_sum$adjr2),
CP = which.min(best1_sum$cp),
BIC = which.min(best1_sum$bic),
AIC = which.min(aic)
)
best1_sum
best1_sum$rss
?leaps::regsubsets
MS_Res <- best1_sum$rss / (n-p.m)
MS_Res
best1_sum
best1$rss
n-p.m
MS_Res
# aic <- n * log(best1_sum$rss / n) + 2 * p.m
data.frame(
Adj.R2 = which.max(best1_sum$adjr2),
CP = which.min(best1_sum$cp),
MSR = which.min(MS_Res)
)
# aic <- n * log(best1_sum$rss / n) + 2 * p.m
data.frame(
Adj.R2 = which.max(best1_sum$adjr2),
CP = which.min(best1_sum$cp),
MSRes = which.min(MS_Res)
)
data.frame(
rsq = which.max(best1_sum$rsq),
CP = which.min(best1_sum$cp),
MSRes = which.min(MS_Res)
)
best1_sum$rsq
best1_sum$cp
MS_Res
leaps::regsubsets(x = y~., data = df1, nvmax = 5)
best1_sum
best1_sum$adjr2
which.max(best1_sum$adjr2)
which.min(best1_sum$bic)
aic <- n * log(best1_sum$rss / n) + 2 * p.m
which.min(aic)
### Problem 2
df <- MPV::table.b1
n <- 20
set.seed(1); chosen_rows <- sort(sample(seq(1, nrow(df)), n))
df2 <- df[chosen_rows,]
chosen_rows
nrow(df)
nrow(MPV::table.b2)
nrow(MPV::table.b1)
df2
# (a)
# PRESS residuals
beta_hat_calc <- function(X, y) {
X <- as.matrix(X)
beta_hat <- solve(t(X) %*% X) %*% t(X) %*% y
return(beta_hat)
}
# (a)
# PRESS residuals
beta_hat_calc <- function(X, y) {
X <- as.matrix(X)
beta_hat <- solve(t(X) %*% X) %*% t(X) %*% y
return(beta_hat)
}
H_calc <- function(X) {
X <- as.matrix(X)
H <- X %*% solve(t(X) %*% X) %*% t(X)
return(H)
}
y_hat_calc <- function(H, y) {
y_hat <- H %*% y
return(y_hat)
}
e_calc <- function(y, y_hat) {
e <- y - y_hat
return(e)
}
df2
df2[,2:ncol(df2)]
X <- df2[,2:ncol(df2)]
X <- cbind(rep(1, n), X)
head(X)
X <- df2[,2:ncol(df2)]
X <- df2[,2:ncol(df2)]
ones <- rep(1, n)
X <- cbind(ones, X)
y <- df2$y
beta_hat <- beta_hat_calc(X=X, y=y)
H <- H_calc(X)
y_hat <- y_hat_calc(H=H, y=y)
e <- e_calc(y=y, y_hat=y_hat)
H_diag <- diag(H)
PRESS_res <- sapply(1:n, function(x) e[x] / (1 - H_diag[x]))
PRESS_res
PRESS <- sum(PRESS_res^2)
PRESS
e
sum(e^2)
sum(e^2)
PRESS_res
e
e
data.frame(e=e,p=PRESS_res)
data.frame(e=e,PRESS=PRESS_res)
sum(e^2)
PRESS_res
PRESS
nrow(df2)
nrow(MPV::table.b1)
# (b)
chosen_rows
length(chosen_rows)
sample(chosen_rows, size = length(chosen_rows)/2)
order(sample(chosen_rows, size = length(chosen_rows)/2))
sort(sample(chosen_rows, size = length(chosen_rows)/2))
# (b)
set.seed(1)
chosen_row_subset <- sort(sample(chosen_rows, size = length(chosen_rows)/2))
chosen_row_subset
df2[chosen_row_subset,]
df[chosen_row_subset,]
df
df[chosen_row_subset,]
df2b <- df[chosen_row_subset,]
df2b
n <- 10
X <- df2b[,2:ncol(df2)]
ones <- rep(1, n)
X <- cbind(ones, X)
y <- df2b$y
beta_hat <- beta_hat_calc(X=X, y=y)
H <- H_calc(X)
y_hat <- y_hat_calc(H=H, y=y)
e <- e_calc(y=y, y_hat=y_hat)
H_diag <- diag(H)
PRESS_res_b <- sapply(1:n, function(x) e[x] / (1 - H_diag[x]))
PRESS_b <- sum(PRESS_res_b^2)
sum(e^2)
PRESS_b
data.frame(e=e,PRESS=PRESS_res_b)
H_diag
G
H
diag((h))
diag(H)
chosen_row_subset
### Problem 2
df <- MPV::table.b1
n <- 20
set.seed(1); chosen_rows <- sort(sample(seq(1, nrow(df)), n))
df2 <- df[chosen_rows,]
# (a)
# PRESS residuals
beta_hat_calc <- function(X, y) {
X <- as.matrix(X)
beta_hat <- solve(t(X) %*% X) %*% t(X) %*% y
return(beta_hat)
}
H_calc <- function(X) {
X <- as.matrix(X)
H <- X %*% solve(t(X) %*% X) %*% t(X)
return(H)
}
y_hat_calc <- function(H, y) {
y_hat <- H %*% y
return(y_hat)
}
e_calc <- function(y, y_hat) {
e <- y - y_hat
return(e)
}
X <- df2[,2:ncol(df2)]
ones <- rep(1, n)
X <- cbind(ones, X)
y <- df2$y
beta_hat <- beta_hat_calc(X=X, y=y)
beta_hat
round(beta_hat,4)
H <- H_calc(X)
y_hat <- y_hat_calc(H=H, y=y)
e <- e_calc(y=y, y_hat=y_hat)
H_diag <- diag(H)
PRESS_res <- sapply(1:n, function(x) e[x] / (1 - H_diag[x]))
PRESS <- sum(PRESS_res^2)
sum(e^2)
# 2.1.1
data.frame(e=e,PRESS=PRESS_res)
# (b)
set.seed(1)
chosen_row_subset <- sort(sample(chosen_rows, size = length(chosen_rows)/2))
df2b <- df[chosen_row_subset,]
n <- 10
X <- df2b[,2:ncol(df2)]
ones <- rep(1, n)
X <- cbind(ones, X)
y <- df2b$y
beta_hat <- beta_hat_calc(X=X, y=y)
beta_hat
round(beta_hat,4)
df2
beta_hat <- beta_hat_calc(X=X, y=y)
beta_hat <- beta_hat_calc(X=X, y=y)
beta_hat <- beta_hat_calc(X=X, y=y)
H <- H_calc(X)
y_hat <- y_hat_calc(H=H, y=y)
e <- e_calc(y=y, y_hat=y_hat)
H_diag <- diag(H)
PRESS_res_b <- sapply(1:n, function(x) e[x] / (1 - H_diag[x]))
PRESS_b <- sum(PRESS_res_b^2)
sum(e^2)
data.frame(e=e,PRESS=PRESS_res_b)
PRESS_b
sum(e^2)
chosen_row_subset
chosen_row_subset %in% chosen_rows
chosen_rows %in% chosen_row_subset
(chosen_rows %in% chosen_row_subset) * 1
(chosen_rows %in% chosen_row_subset) * -1
(chosen_rows %in% chosen_row_subset) * 1
!(chosen_rows %in% chosen_row_subset)
chosen_rows[!(chosen_rows %in% chosen_row_subset)]
# predictive powers
deleted_rows <- chosen_rows[!(chosen_rows %in% chosen_row_subset)]
df2c <- df2[deleted_rows,]
df2c
df2c <- df[deleted_rows,]
df2c
X2 <- df2c[,2:ncol(df2c)]
X2
ones
X2 <- cbind(ones, X2)
X2
y2 <- df2c$y
# predictive powers
deleted_rows <- chosen_rows[!(chosen_rows %in% chosen_row_subset)]
df2c <- df[deleted_rows,]
X2 <- df2c[,2:ncol(df2c)]
X2 <- cbind(ones, X2)
y2 <- df2c$y
H2 <- H_calc(X2)
y_hat2 <- y_hat_calc(H=H2, y=y2)
e2 <- e_calc(y=y2, y_hat=y_hat2)
H_diag2 <- diag(H2)
y_hat2
e2
n
PRESS_res_c <- sapply(1:n, function(x) e2[x] / (1 - H_diag2[x]))
PRESS_c <- sum(PRESS_res_c^2)
sum(e2^2)
PRESS_c
deleted_rows
# (b)
set.seed(1)
chosen_row_subset <- sort(sample(chosen_rows, size = length(chosen_rows)/2))
df2b <- df[chosen_row_subset,]
n <- 10
X <- df2b[,2:ncol(df2)]
ones <- rep(1, n)
X <- cbind(ones, X)
y <- df2b$y
beta_hat <- beta_hat_calc(X=X, y=y)
H <- H_calc(X)
y_hat <- y_hat_calc(H=H, y=y)
e <- e_calc(y=y, y_hat=y_hat)
H_diag <- diag(H)
PRESS_res_b <- sapply(1:n, function(x) e[x] / (1 - H_diag[x]))
PRESS_b <- sum(PRESS_res_b^2)
sum(e^2)
# 2.2.1
data.frame(e=e,PRESS=PRESS_res_b)
# predictive powers
deleted_rows <- chosen_rows[!(chosen_rows %in% chosen_row_subset)]
# predictive powers
deleted_rows <- chosen_rows[!(chosen_rows %in% chosen_row_subset)]
df2c <- df[deleted_rows,]
X2 <- df2c[,2:ncol(df2c)]
X2 <- cbind(ones, X2)
y_hat2 <- beta_hat %*% X2
beta_hat %*% X2
dim(beta_hat)
dim(X2)
X2
y_hat2 <- X2 %*% beta_hat
dim(X2)
dim(beta_hat)
y_hat2 <- X2 %*% as.matrix(beta_hat)
y_hat2 <- as.matrix(X2) %*% as.matrix(beta_hat)
y_hat2
y2 <- df2c$y
# H2 <- H_calc(X2)
# y_hat2 <- y_hat_calc(H=H2, y=y2)
e2 <- e_calc(y=y2, y_hat=y_hat2)
e2
sum(e2^2)
deleted_rows
chosen_row_subset
