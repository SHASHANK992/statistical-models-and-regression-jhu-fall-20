na.rm = TRUE)
deviance_D > qchisq(p = 0.95, df = n - 3)
deviance_D / (n - 3)
deviance_D
qchisq(p = 0.95, df = n - 3)
df_fit2
### Problem 2
df <- MPV::p13.4
n <- 9
set.seed(1); chosen_rows <- sort(sample(seq(1, nrow(df)), n))
df <- df[chosen_rows,]
head(df)
### Problem 1
df <- MPV::p13.2
n <- 15
set.seed(1); chosen_rows <- sort(sample(seq(1, nrow(df)), n))
df <- df[chosen_rows,]
# part a
df_fit <- glm(formula = y~x, family = "Bernoulli", data = df)
# part a
df_fit <- glm(formula = y~x, family = "bernoulli", data = df)
?glm
df$y <- as.factor(df$y)
# part a
df_fit <- glm(formula = y~x, family = binomial(), data = df)
df_fit
### Problem 2
df <- MPV::p13.4
n <- 9
set.seed(1); chosen_rows <- sort(sample(seq(1, nrow(df)), n))
df <- df[chosen_rows,]
head(df)
df$y <- df$r / df$n
df$y
# part a
df_fit <- glm(formula = y~x, family = binomial(), data = df)
df
### Problem 2
df <- MPV::p13.4
n <- 9
set.seed(1); chosen_rows <- sort(sample(seq(1, nrow(df)), n))
df <- df[chosen_rows,]
df$y <- df$r / df$n
# part a
df_fit <- glm(formula = y~x, family = binomial(), data = df)
df_fit
# part b
summary(df_fit)
anova(df_fit, test = 'Chi')
df_fit$null.deviance - df_fit$deviance > qchisq(p = 0.95, df = 1)
deviance_D <- 2 *
sum(df$y * log(df$y / df_fit$fitted.values),
(1 - df$y) * log((1 - df$y) / (1 - df_fit$fitted.values)),
na.rm = TRUE)
deviance_D > qchisq(p = 0.95, df = n - 2)
deviance_D / (n - 2)
deviance_D > qchisq(p = 0.95, df = n - 2)
deviance_D / (n - 2)
deviance_D
# part b
summary(df_fit)
deviance_D
round(deviance_D,4)
deviance_D > qchisq(p = 0.95, df = n - 1)
qchisq(p = 0.95, df = n - 1)
anova(df_fit, test = 'Chi')
deviance_D
?qchisq
qchisq(p = 0.95, df = n - 1, lower.tail = FALSE)
qchisq(p = 0.95, df = n - 1)
deviance_D < qchisq(p = 0.95, df = n - 1, lower.tail = FALSE)
qchisq(p = 0.95, df = n - 1)
qchisq(p = 0.95, df = n - 1, lower.tail = FALSE)
### Problem 1
df <- MPV::p13.2
n <- 15
set.seed(1); chosen_rows <- sort(sample(seq(1, nrow(df)), n))
df <- df[chosen_rows,]
# part a
df_fit <- glm(formula = y~x, family = binomial(), data = df)
# part b
# Reference: https://stats.stackexchange.com/questions/108995/interpreting-residual-and-null-deviance-in-glm-r
summary(df_fit)
anova(df_fit, test = 'Chi')
df_fit$null.deviance - df_fit$deviance > qchisq(p = 0.95, df = 1)
deviance_D <- 2 *
sum(df$y * log(df$y / df_fit$fitted.values),
(1 - df$y) * log((1 - df$y) / (1 - df_fit$fitted.values)),
na.rm = TRUE)
deviance_D > qchisq(p = 0.95, df = n - 2)
deviance_D < qchisq(p = 0.95, df = n - 2, lower.tail = FALSE)
deviance_D / (n - 2)
qchisq(p = 0.95, df = n - 2, lower.tail = FALSE)
# part d
df$x2 <- df$x^2
df_fit2 <- glm(formula = y ~ x + x2, family = binomial(), data = df)
summary(df_fit2)
anova(df_fit2, test = 'Chi')
df_fit2$null.deviance - df_fit2$deviance >
qchisq(p = 0.95, df = df_fit2$df.null - df_fit2$df.residual)
deviance_D <- 2 *
sum(df$y * log(df$y / df_fit2$fitted.values),
(1 - df$y) * log((1 - df$y) / (1 - df_fit2$fitted.values)),
na.rm = TRUE)
deviance_D < qchisq(p = 0.95, df = n - 3, lower.tail = FALSE)
deviance_D > qchisq(p = 0.95, df = n - 3)
qchisq(p = 0.95, df = n - 3)
qchisq(p = 0.95, df = n - 3, lower.tail = FALSE)
deviance_D
### Problem 2
df <- MPV::p13.4
n <- 9
set.seed(1); chosen_rows <- sort(sample(seq(1, nrow(df)), n))
df <- df[chosen_rows,]
df$y <- df$r / df$n
# part a
df_fit <- glm(formula = y~x, family = binomial(), data = df)
# part b
summary(df_fit)
anova(df_fit, test = 'Chi')
df_fit$null.deviance - df_fit$deviance > qchisq(p = 0.95, df = 1)
deviance_D <- 2 *
sum(df$y * log(df$y / df_fit$fitted.values),
(1 - df$y) * log((1 - df$y) / (1 - df_fit$fitted.values)),
na.rm = TRUE)
deviance_D > qchisq(p = 0.95, df = n - 1)
deviance_D < qchisq(p = 0.95, df = n - 1, lower.tail = FALSE)
deviance_D / (n - 2)
qchisq(p = 0.95, df = n - 2)
qchisq(p = 0.95, df = n - 2, lower.tail = FALSE)
deviance_D / (n - 2)
# part c
plot(df$x, df$y / (n))
plot(df$x, df_fit$fitted.values, ylim = c(0,1), pch = 3,
main = 'Fitted and True Values against X',
xlab = 'x', ylab = 'y, y-hat')
points(df$x, df$y, pch=2)
legend("right", legend = c('Fitted Values', 'True Values'),
pch = c(3,2))
df_fit$fitted.values
df$y
df_fit$null.deviance - df_fit$deviance > qchisq(p = 0.95, df = 1)
anova(df_fit, test = 'Chi')
# part b
summary(df_fit)
anova(df_fit, test = 'Chi')
df_fit$null.deviance - df_fit$deviance > qchisq(p = 0.95, df = 1)
deviance_D <- 2 *
sum(df$y * log(df$y / df_fit$fitted.values),
(1 - df$y) * log((1 - df$y) / (1 - df_fit$fitted.values)),
na.rm = TRUE)
deviance_D
qchisq(p = 0.95, df = n - 2)
qchisq(p = 0.95, df = n - 2, lower.tail = FALSE)
# part d
df$x2 <- df$x^2
df_fit2 <- glm(formula = y ~ x + x2, family = binomial(), data = df)
df_fit2
summary(df_fit2)
anova(df_fit2, test = 'Chi')
df_fit2$null.deviance - df_fit2$deviance >
qchisq(p = 0.95, df = df_fit2$df.null - df_fit2$df.residual)
deviance_D <- 2 *
sum(df$y * log(df$y / df_fit2$fitted.values),
(1 - df$y) * log((1 - df$y) / (1 - df_fit2$fitted.values)),
na.rm = TRUE)
deviance_D > qchisq(p = 0.95, df = n - 3)
deviance_D < qchisq(p = 0.95, df = n - 3, lower.tail = FALSE)
deviance_D / (n - 3)
deviance_D
# part d
df$x2 <- df$x^2
df_fit2 <- glm(formula = y ~ x + x2, family = binomial(), data = df)
summary(df_fit2)
anova(df_fit2, test = 'Chi')
df_fit2$null.deviance - df_fit2$deviance >
qchisq(p = 0.95, df = df_fit2$df.null - df_fit2$df.residual)
deviance_D <- 2 *
sum(df$y * log(df$y / df_fit2$fitted.values),
(1 - df$y) * log((1 - df$y) / (1 - df_fit2$fitted.values)),
na.rm = TRUE)
deviance_D > qchisq(p = 0.95, df = n - 3)
deviance_D / (n - 3)
deviance_D
qchisq(p = 0.95, df = n - 3)
deviance_D / (n - 3)
df_fit2
points(df$x, df_fit2$fitted.values, pch=3)
points(df$x, df_fit2$fitted.values, pch=4)
# part e
plot(df$x, df_fit$fitted.values, ylim = c(0,1), pch = 3,
main = 'Fitted and True Values against X',
xlab = 'x', ylab = 'y, y-hat')
points(df$x, df_fit2$fitted.values, pch=4)
# part e
plot(df$x, df_fit$fitted.values, ylim = c(0,1), pch = 3,
main = 'Fitted and True Values against X',
xlab = 'x', ylab = 'y, y-hat')
points(df$x, df_fit2$fitted.values, pch=1)
points(df$x, df_fit2$fitted.values, pch=1, col = 'red')
points(df$x, df$y, pch=2, col = 'blue')
legend("right", legend = c('Model 1', 'Model 2', 'True Values'),
pch = c(3,1,2), col = c('black', 'red', 'blue'))
# part e
plot(df$x, df_fit$fitted.values, ylim = c(0,1), pch = 3,
main = 'Fitted and True Values against X',
xlab = 'x', ylab = 'y, y-hat')
legend("right", legend = c('Model 1', 'Model 2', 'True Values'),
pch = c(3,1,2), col = c('black', 'red', 'blue'))
points(df$x, df$y, pch=2, col = 'blue')
points(df$x, df_fit2$fitted.values, pch=1, col = 'red')
df
# part f
design_mat <- cbind(rep(1,n), df$x, df$x2)
design_mat
# part f
design_mat <- cbind(rep(1,n), df$x, df$x2)
solve(t(design_mat) %*% cov(design_mat) %*% design_mat)
cov(design_mat)
%*% design_mat
design_mat
cov(design_mat) %*% design_mat
t(design_mat)
var(df_fit2$coefficients)
df_fit2$coefficients
cov(df_fit2$coefficients)
cov(design_mat)
design_mat
df_fit2$effects
df_fit2$R
?glm
df_fit2$qr
df_fit2$weights
df_fit2$xlevels
df_fit2$contrasts
df_fit2$method
df_fit2$control
df_fit2$terms
# part f
df_fit2
# part f
summary(df_fit2)
# part f
summary(df_fit2)[1]
# part f
summary(df_fit2)[2]
# part f
summary(df_fit2)[3]
# part f
summary(df_fit2)[4]
# part f
summary(df_fit2)[5]
# part f
summary(df_fit2)[6]
# part f
summary(df_fit2)[7]
df_fit2$coefficients
names(summary(df_fit2))
summary(df_fit2)$cov.unscaled
# part f
summary(df_fit2)
sqrt(diag(summary(df_fit2)$cov.unscaled))
sqrt(diag(summary(df_fit2)$cov.unscaled))
summary(df_fit2)$cov.unscaled
sqrt(diag(summary(df_fit2)$cov.unscaled))
df_fit2$coefficients
df_fit2$coefficients / sqrt(diag(summary(df_fit2)$cov.unscaled))
# part f
summary(df_fit2)
df_fit2$coefficients / sqrt(diag(summary(df_fit2)$cov.unscaled))
std_errors
std_errors <- df_fit2$coefficients / sqrt(diag(summary(df_fit2)$cov.unscaled))
# part g
df_fit2$coefficients
std_errors
1.96 * std_errors
# part g
df_fit2$coefficients + c(1.96 * std_errors)
df_fit2$coefficients - c(1.96 * std_errors)
df_fit2$coefficients
qnorm
?qnorm
qnorm(0.05/2)
# part g
df_fit2$coefficients + c(1.96 * std_errors)
df_fit2$coefficients - c(1.96 * std_errors)
df_fit2$coefficients
c(1.96 * std_errors)
std_errors
df_fit2$coefficients
std_errors <- sqrt(diag(summary(df_fit2)$cov.unscaled))
wald_statistics <- df_fit2$coefficients /
sqrt(diag(summary(df_fit2)$cov.unscaled))
wald_statistics <- df_fit2$coefficients / std_errors
# part g
df_fit2$coefficients + c(1.96 * std_errors)
df_fit2$coefficients - c(1.96 * std_errors)
std_errors
summary(df_fit2)
# part g
df_fit2$coefficients + c(1.96 * std_errors)
df_fit2$coefficients - c(1.96 * std_errors)
# part g
round(df_fit2$coefficients + c(1.96 * std_errors),4)
round(df_fit2$coefficients - c(1.96 * std_errors),4)
### Problem 3
df <- MPV::p13.7
n <- 30
set.seed(1); chosen_rows <- sort(sample(seq(1, nrow(df)), n))
df <- df[chosen_rows,]
df
head(df)
# part a
df_fit <- glm(formula = y~., family = poisson(), data = df)
df_fit
summary(df_fit)
anova(df_fit)
df_fit
df$y
# part b
deviance_D <- 2 *
sum(df$y * log(df$y / df_fit$fitted.values),
(1 - df$y) * log((1 - df$y) / (1 - df_fit$fitted.values)),
na.rm = TRUE)
deviance_D
summary(df_fit)
deviance_D
log(-1)
log(1)
log(2)
log(0.5)
log(1)
log(0)
summary(df_fit)
### Problem 1
df <- MPV::p13.2
n <- 15
set.seed(1); chosen_rows <- sort(sample(seq(1, nrow(df)), n))
df <- df[chosen_rows,]
# part a
df_fit <- glm(formula = y~x, family = binomial(), data = df)
# part b
# Reference: https://stats.stackexchange.com/questions/108995/interpreting-residual-and-null-deviance-in-glm-r
summary(df_fit)
deviance_D <- 2 *
sum(df$y * log(df$y / df_fit$fitted.values),
(1 - df$y) * log((1 - df$y) / (1 - df_fit$fitted.values)),
na.rm = TRUE)
deviance_D
### Problem 3
df <- MPV::p13.7
n <- 30
set.seed(1); chosen_rows <- sort(sample(seq(1, nrow(df)), n))
df <- df[chosen_rows,]
# part a
df_fit <- glm(formula = y~., family = poisson(), data = df)
summary(df_fit)
summary(df_fit)
names(summary(df_fit))
summary(df_fit)$deviance
# part b
summary(df_fit)$deviance
deviance_D <- 2 *
sum(df$y * log(df$y / df_fit$fitted.values),
(1 - df$y) * log((1 - df$y) / (1 - df_fit$fitted.values)),
na.rm = TRUE)
deviance_D
summary(df_fit)$deviance
df_fit$fitted.values
df$y * log(df$y / df_fit$fitted.values)
(1 - df$y) * log((1 - df$y) / (1 - df_fit$fitted.values))
deviance_D
# part b
deviance_D <- summary(df_fit)$deviance
deviance_D
df_fit
deviance_D > qchisq(p = 0.95, df = n - 5)
qchisq(p = 0.95, df = n - 5)
deviance_D / (n - 5)
# part c
anova(dm_fit)
# part c
anova(df_fit)
summary(df_fit)
head(df)
mean(df$y)
var(df$y)
# part c
df_fit1 <- glm(formula = y~x2+x3+x4, family = poisson(), data = df)
df_fit1
df_fit
df_fit1$deviance
# part c
df_fit$deviance
# part c
df_fit1$deviance
df_fit$deviance
df_fit1$deviance - df_fit$deviance
df_fit1$deviance - df_fit$deviance > qchisq(p = 0.95, df = 1)
df_fit2 <- glm(formula = y~x1+x3+x4, family = poisson(), data = df)
df_fit2$deviance - df_fit$deviance > qchisq(p = 0.95, df = 1)
df_fit3 <- glm(formula = y~x1+x2+x4, family = poisson(), data = df)
df_fit3$deviance - df_fit$deviance > qchisq(p = 0.95, df = 1)
df_fit4 <- glm(formula = y~x1+x2+x3, family = poisson(), data = df)
df_fit4$deviance - df_fit$deviance > qchisq(p = 0.95, df = 1)
df_fit
summary(df_fit)
df_fit1$deviance - df_fit$deviance > qchisq(p = 0.95, df = 1)
df_fit2$deviance - df_fit$deviance > qchisq(p = 0.95, df = 1)
df_fit3$deviance - df_fit$deviance > qchisq(p = 0.95, df = 1)
df_fit4$deviance - df_fit$deviance > qchisq(p = 0.95, df = 1)
df_fit1$deviance - df_fit$deviance
qchisq(p = 0.95, df = 1)
df_fit1$deviance - df_fit$deviance
df_fit2$deviance - df_fit$deviance
df_fit3$deviance - df_fit$deviance
df_fit4$deviance - df_fit$deviance
# part d
summary(df_fit)
# part d
summary(df_fit)
std_errors <- sqrt(diag(summary(df_fit)$cov.unscaled))
wald_statistics <- df_fit$coefficients / std_errors
wald_statistics
round(wald_statistics,4)
qnorm(p = 0.95)
abs(round(wald_statistics,4))
abs(round(wald_statistics,4)) > qnorm(p = 0.95)
qnorm(p = 0.05)
# part e
round(df_fit$coefficients + c(1.96 * std_errors),4)
round(df_fit$coefficients - c(1.96 * std_errors),4)
qchisq(0.95,1)
qnorm(0.05)^2
qnorm(0.025)^2
qnorm(0.025)
alpha <- 0.05
abs(round(wald_statistics,4)) > qnorm(p = 1 - alpha / 2)
qnorm(p = 1 - alpha / 2)
# part e
round(df_fit$coefficients + c(qnorm(p = 1 - alpha / 2) * std_errors),4)
round(df_fit$coefficients - c(qnorm(p = 1 - alpha / 2) * std_errors),4)
qnorm(p = 1 - alpha / 2)
abs(round(wald_statistics,4)) > qnorm(p = 1 - alpha / 2)
# part e
round(df_fit$coefficients + c(qnorm(p = 1 - alpha / 2) * std_errors),4)
round(df_fit$coefficients - c(qnorm(p = 1 - alpha / 2) * std_errors),4)
set.seed(1); chosen_rows <- sort(sample(seq(1, 15), n))
n <- 10
set.seed(1); chosen_rows <- sort(sample(seq(1, 15), n))
chosen_rows
### Problem 5
df <- read.csv('p13_26.csv')
df
head(df)
colnames(df)
n <- 10
set.seed(1); chosen_rows <- sort(sample(seq(1, 15), n))
set.seed(1); chosen_rows <- sort(sample(seq(1, nrow(df)), n))
df <- df[chosen_rows,]
df
# Fit a model
df_fit <- glm(formula = y~., family = poisson(), data = df)
summary(df_fit)
anova(df_fit)
# Calculate the deviance
deviance_D <- summary(df_fit)$deviance
deviance_D > qchisq(p = 0.95, df = n - 5)
deviance_D / (n - 4)
df_fit
df_fit
df_fit$fitted.values
plot(residuals(df_fit, type = 'deviance'))
df_fit
# Calculate the deviance
deviance_D <- summary(df_fit)$deviance
deviance_D
qchisq(p = 0.95, df = n - 4)
deviance_D > qchisq(p = 0.95, df = n - 4)
deviance_D / (n - 4)
# partial deviance
df_fit1 <- glm(formula = y~Oil+Time, family = poisson(), data = df)
df_fit1$deviance - df_fit$deviance > qchisq(p = 0.95, df = 1)
df_fit2 <- glm(formula = y~Temperature+Time, family = poisson(), data = df)
df_fit2$deviance - df_fit$deviance > qchisq(p = 0.95, df = 1)
df_fit3 <- glm(formula = y~Temperature+Oil, family = poisson(), data = df)
df_fit3$deviance - df_fit$deviance > qchisq(p = 0.95, df = 1)
df_fit
# part d
summary(df_fit)
df_fit2
summary(df_fit2)
# partial deviance
df_fit1 <- glm(formula = y~Oil+Time, family = poisson(), data = df)
df_fit1$deviance - df_fit$deviance > qchisq(p = 0.95, df = 1)
df_fit1$deviance - df_fit$deviance
df_fit2$deviance - df_fit$deviance
df_fit3$deviance - df_fit$deviance
qchisq(p = 0.95, df = 1)
df_fit
summary(df_fit)
# Wald statistics
summary(df_fit)
std_errors <- sqrt(diag(summary(df_fit)$cov.unscaled))
wald_statistics <- df_fit$coefficients / std_errors
alpha <- 0.05
abs(round(wald_statistics,4)) > qnorm(p = 1 - alpha / 2)
wald_statistics
round(wald_statistics,4)
# Wald CI
round(df_fit$coefficients + c(qnorm(p = 1 - alpha / 2) * std_errors),4)
round(df_fit$coefficients - c(qnorm(p = 1 - alpha / 2) * std_errors),4)
