empty_mat_df[,1]
empty_mat_df[,2]
empty_mat_df[,1] & empty_mat_df[,2]
(empty_mat_df[,1] & empty_mat_df[,2]) * 1
empty_mat_df[,i]
# loop across columns???
for (i in 1:parity_n) {
print(i)
# empty_mat_df[,i]
}
a_or_b
rep(1,5) | rep(0,5)
# XOR
# (A AND B)
a_or_b <- rep(NA, 2^parity_n)
not_a_and_b <- rep(NA, 2^parity_n)
a_or_b_or_not_a_and_b <- rep(NA, 2^parity_n)
# loop across columns???
for (i in 1:(parity_n - 1)) {
if (i == 1) {
# 1 OR 2
a_or_b <- empty_mat_df[,i] | empty_mat_df[,i+1]
} else if ((i != 1) & (i != 2)) {
# 2 OR 3,
a_or_b <- empty_mat_df[,i] | a_or_b
}
}
a_or_b
a_or_b * 1
a_or_b <- a_or_b * 1
# XOR
# (A AND B)
a_and_b <- rep(NA, 2^parity_n)
# XOR
# (A AND B)
a_and_b <- rep(NA, 2^parity_n)
for (i in 1:(parity_n - 1)) {
if (i == 1) {
# 1 AND 2
a_and_b <- empty_mat_df[,i] & empty_mat_df[,i+1]
} else if ((i != 1) & (i != 2)) {
# 2 AND 3,
a_and_b <- empty_mat_df[,i] & a_and_b
}
}
empty_mat_df
a_or_b
# (A OR B)
a_or_b <- rep(NA, 2^parity_n)
a_or_b
# (A OR B)
a_or_b <- rep(NA, 2^parity_n)
for (i in 1:(parity_n - 1)) {
if (i == 1) {
# 1 OR 2
a_or_b <- empty_mat_df[,i] | empty_mat_df[,i+1]
} else if ((i != 1) & (i != 2)) {
# 2 OR 3,
a_or_b <- empty_mat_df[,i] | a_or_b
}
}
a_or_b <- a_or_b * 1
a_or_b
a_and_b
a_and_b <- a_and_b * 1
a_and_b
i=1
!(empty_mat_df[,i] & empty_mat_df[,i+1])
# NOT (A AND B)
not_a_and_b <- rep(NA, 2^parity_n)
for (i in 1:(parity_n - 1)) {
if (i == 1) {
# 1 OR 2
not_a_and_b <- !(empty_mat_df[,i] & empty_mat_df[,i+1])
} else if ((i != 1) & (i != 2)) {
# 2 OR 3,
not_a_and_b <- !(empty_mat_df[,i] & not_a_and_b)
}
}
not_a_and_b
not_a_and_b <- not_a_and_b * 1
not_a_and_b
a_and_b
!a_and_b
!a_and_b * 1
(!a_and_b) * 1
(!a_and_b) * 1 == not_a_and_b
!a_and_b
(!a_and_b) * 1
not_a_and_b <- (!a_and_b) * 1
# (A OR B) OR NOT (A AND B)
a_or_b_or_not_a_and_b <- (a_or_b | not_a_and_b) * 1
a_or_b_or_not_a_and_b
setwd('Desktop')
setwd("~/Desktop")
?write.csv
write.csv(a_or_b_or_not_a_and_b, file = 'y_truth_table16.csv', row.names = FALSE)
# parity (16)
# truth_parity <- function(parity_n=16) {
#   empty_mat <- matrix(data=NA, nrow = parity_n^16, ncol = parity_n)
# }
parity_n=16
empty_mat <- matrix(NA, nrow = 2^parity_n, ncol = parity_n)
# count down inside count up outside
inner_count <- parity_n; outer_count <- 0
for (i in 1:parity_n) {
# print(paste0('i', inner_count - i, 'o', outer_count + i))
new_vec <- rep(rep(c(1, 0), each = 2^(inner_count - i)), 2^(outer_count + i - 1))
empty_mat[,i] <- new_vec
}
empty_mat_df <- as.data.frame(empty_mat)
write.csv(empty_mat_df, file = 'truth_table16.csv')
# XOR
# (A AND B)
a_and_b <- rep(NA, 2^parity_n)
for (i in 1:(parity_n - 1)) {
if (i == 1) {
# 1 AND 2
a_and_b <- empty_mat_df[,i] & empty_mat_df[,i+1]
} else if ((i != 1) & (i != 2)) {
# 2 AND 3,
a_and_b <- empty_mat_df[,i] & a_and_b
}
}
a_and_b <- a_and_b * 1
# (A OR B)
a_or_b <- rep(NA, 2^parity_n)
for (i in 1:(parity_n - 1)) {
if (i == 1) {
# 1 OR 2
a_or_b <- empty_mat_df[,i] | empty_mat_df[,i+1]
} else if ((i != 1) & (i != 2)) {
# 2 OR 3,
a_or_b <- empty_mat_df[,i] | a_or_b
}
}
a_or_b <- a_or_b * 1
not_a_and_b <- (!a_and_b) * 1
# (A OR B) OR NOT (A AND B)
a_or_b_or_not_a_and_b <- (a_or_b | not_a_and_b) * 1
write.csv(a_or_b_or_not_a_and_b, file = 'y_truth_table16.csv', row.names = FALSE)
# parity (16)
# truth_parity <- function(parity_n=16) {
#   empty_mat <- matrix(data=NA, nrow = parity_n^16, ncol = parity_n)
# }
parity_n=16
empty_mat <- matrix(NA, nrow = 2^parity_n, ncol = parity_n)
# count down inside count up outside
inner_count <- parity_n; outer_count <- 0
for (i in 1:parity_n) {
# print(paste0('i', inner_count - i, 'o', outer_count + i))
new_vec <- rep(rep(c(1, 0), each = 2^(inner_count - i)), 2^(outer_count + i - 1))
empty_mat[,i] <- new_vec
}
empty_mat_df <- as.data.frame(empty_mat)
write.csv(empty_mat_df, file = 'truth_table16.csv', row.names = FALSE)
# XOR
# (A AND B)
a_and_b <- rep(NA, 2^parity_n)
for (i in 1:(parity_n - 1)) {
if (i == 1) {
# 1 AND 2
a_and_b <- empty_mat_df[,i] & empty_mat_df[,i+1]
} else if ((i != 1) & (i != 2)) {
# 2 AND 3,
a_and_b <- empty_mat_df[,i] & a_and_b
}
}
a_and_b <- a_and_b * 1
# (A OR B)
a_or_b <- rep(NA, 2^parity_n)
for (i in 1:(parity_n - 1)) {
if (i == 1) {
# 1 OR 2
a_or_b <- empty_mat_df[,i] | empty_mat_df[,i+1]
} else if ((i != 1) & (i != 2)) {
# 2 OR 3,
a_or_b <- empty_mat_df[,i] | a_or_b
}
}
a_or_b <- a_or_b * 1
not_a_and_b <- (!a_and_b) * 1
# (A OR B) OR NOT (A AND B)
a_or_b_or_not_a_and_b <- (a_or_b | not_a_and_b) * 1
write.csv(a_or_b_or_not_a_and_b, file = 'y_truth_table16.csv', row.names = FALSE)
###
parity_n=127
empty_mat <- matrix(NA, nrow = 2^parity_n, ncol = parity_n)
# count down inside count up outside
inner_count <- parity_n; outer_count <- 0
for (i in 1:parity_n) {
# print(paste0('i', inner_count - i, 'o', outer_count + i))
new_vec <- rep(rep(c(1, 0), each = 2^(inner_count - i)), 2^(outer_count + i - 1))
empty_mat[,i] <- new_vec
}
empty_mat_df <- as.data.frame(empty_mat)
write.csv(empty_mat_df, file = 'truth_table127.csv', row.names = FALSE)
# (A OR B)
a_or_b <- rep(NA, 2^parity_n)
for (i in 1:(parity_n - 1)) {
if (i == 1) {
# 1 OR 2
a_or_b <- empty_mat_df[,i] | empty_mat_df[,i+1]
} else if ((i != 1) & (i != 2)) {
# 2 OR 3,
a_or_b <- empty_mat_df[,i] | a_or_b
}
}
# XOR
# (A AND B)
a_and_b <- rep(NA, 2^parity_n)
for (i in 1:(parity_n - 1)) {
if (i == 1) {
# 1 AND 2
a_and_b <- empty_mat_df[,i] & empty_mat_df[,i+1]
} else if ((i != 1) & (i != 2)) {
# 2 AND 3,
a_and_b <- empty_mat_df[,i] & a_and_b
}
}
empty_mat_df
###
parity_n=127
empty_mat <- matrix(NA, nrow = 2^parity_n, ncol = parity_n)
# count down inside count up outside
inner_count <- parity_n; outer_count <- 0
for (i in 1:parity_n) {
# print(paste0('i', inner_count - i, 'o', outer_count + i))
new_vec <- rep(rep(c(1, 0), each = 2^(inner_count - i)), 2^(outer_count + i - 1))
empty_mat[,i] <- new_vec
}
###
parity_n=127
###
parity_n=127
empty_mat <- matrix(NA, nrow = 2^parity_n, ncol = parity_n)
empty_mat <- matrix(2, nrow = 2^parity_n, ncol = parity_n)
###
parity_n=127
matrix(NA, nrow = 2^parity_n, ncol = parity_n)
###
parity_n=127
empty_mat <- matrix(0, nrow = 2^parity_n, ncol = parity_n)
parity_n=16
empty_mat <- matrix(NA, nrow = 2^parity_n, ncol = parity_n)
2^127
###
parity_n=50
empty_mat <- matrix(0, nrow = 2^parity_n, ncol = parity_n)
###
parity_n <- 20
empty_mat <- matrix(0, nrow = 2^parity_n, ncol = parity_n)
###
parity_n <- 30
empty_mat <- matrix(0, nrow = 2^parity_n, ncol = parity_n)
###
parity_n <- 25
empty_mat <- matrix(0, nrow = 2^parity_n, ncol = parity_n)
###
parity_n <- 29
empty_mat <- matrix(0, nrow = 2^parity_n, ncol = parity_n)
###
parity_n <- 28
empty_mat <- matrix(0, nrow = 2^parity_n, ncol = parity_n)
###
parity_n <- 27
rep(1,2&127)
rep(1,2^127)
rep(1,5)
### Problem 5
library(mvtnorm)
### Problem 5
N <- 500
### Problem 5
N <- 500
X2 <- rnorm(n = N, mean = 2, sd = sqrt(1))
### Problem 5
N <- 500
X1 <- rnorm(n = N, mean = 1, sd = sqrt(0.1))
X2 <- rnorm(n = N, mean = 2, sd = sqrt(0.1))
X3 <- rnorm(n = N, mean = 3, sd = sqrt(0.2))
P1 <- 1/6
P2 <- 1/2
P3 <- 1/3
X1
(X1 * P1) + (X2 * P2) + (X3 * P3)
X_mix <- (X1 * P1) + (X2 * P2) + (X3 * P3)
length(X_mix)
X_mix
### Problem 5
library(mclust)
em_clustering = Mclust(data = X_mix, G = 3)
em_clustering$parameters
em_clustering$parameters
summary(em_clustering)
em_clustering$parameters
em_clustering$parameters$pro
1/6
1/2
1/3
em_clustering$parameters$mean
?Mclust
em_clustering$parameters
em_clustering$parameters$variance
###
parity_n <- 127
empty_mat <- matrix(0, nrow = 2^parity_n, ncol = parity_n)
install.packages('neuralnet')
library(neuralnet)
# parity (16)
# truth_parity <- function(parity_n=16) {
#   empty_mat <- matrix(data=NA, nrow = parity_n^16, ncol = parity_n)
# }
parity_n=16
empty_mat <- matrix(NA, nrow = 2^parity_n, ncol = parity_n)
# count down inside count up outside
inner_count <- parity_n; outer_count <- 0
for (i in 1:parity_n) {
# print(paste0('i', inner_count - i, 'o', outer_count + i))
new_vec <- rep(rep(c(1, 0), each = 2^(inner_count - i)), 2^(outer_count + i - 1))
empty_mat[,i] <- new_vec
}
empty_mat_df <- as.data.frame(empty_mat)
# XOR
# (A AND B)
a_and_b <- rep(NA, 2^parity_n)
for (i in 1:(parity_n - 1)) {
if (i == 1) {
# 1 AND 2
a_and_b <- empty_mat_df[,i] & empty_mat_df[,i+1]
} else if ((i != 1) & (i != 2)) {
# 2 AND 3,
a_and_b <- empty_mat_df[,i] & a_and_b
}
}
a_and_b <- a_and_b * 1
# (A OR B)
a_or_b <- rep(NA, 2^parity_n)
for (i in 1:(parity_n - 1)) {
if (i == 1) {
# 1 OR 2
a_or_b <- empty_mat_df[,i] | empty_mat_df[,i+1]
} else if ((i != 1) & (i != 2)) {
# 2 OR 3,
a_or_b <- empty_mat_df[,i] | a_or_b
}
}
a_or_b <- a_or_b * 1
not_a_and_b <- (!a_and_b) * 1
# (A OR B) OR NOT (A AND B)
a_or_b_or_not_a_and_b <- (a_or_b | not_a_and_b) * 1
X <- empty_mat_df
Y <- a_or_b_or_not_a_and_b
df <- cbind(Y, X)
net1 <- neuralnet(Y~., df, hidden=2)
net1
plot(net.Q5)
plot(net1)
plot(net1)
###
parity_n <- 127
empty_mat <- matrix(0, nrow = 2^parity_n, ncol = parity_n)
net1$generalized.weights
net1$weights
plot(net1)
y <- predict(net1, X)
y == Y
y
round(y)
round(y) == Y
sum(round(y) == Y)
y <- predict(net1, X)
y <- predict(net1, X)
sum(round(y) == Y)
X <- empty_mat_df
Y <- a_or_b_or_not_a_and_b
df <- cbind(Y, X)
net1 <- neuralnet(Y~., df, hidden=2)
plot(net1)
y <- predict(net1, X)
sum(round(y) == Y)
### p_8
parity_n=8
empty_mat <- matrix(NA, nrow = 2^parity_n, ncol = parity_n)
# count down inside count up outside
inner_count <- parity_n; outer_count <- 0
for (i in 1:parity_n) {
# print(paste0('i', inner_count - i, 'o', outer_count + i))
new_vec <- rep(rep(c(1, 0), each = 2^(inner_count - i)), 2^(outer_count + i - 1))
empty_mat[,i] <- new_vec
}
empty_mat_df <- as.data.frame(empty_mat)
# XOR
# (A AND B)
a_and_b <- rep(NA, 2^parity_n)
for (i in 1:(parity_n - 1)) {
if (i == 1) {
# 1 AND 2
a_and_b <- empty_mat_df[,i] & empty_mat_df[,i+1]
} else if ((i != 1) & (i != 2)) {
# 2 AND 3,
a_and_b <- empty_mat_df[,i] & a_and_b
}
}
a_and_b <- a_and_b * 1
# (A OR B)
a_or_b <- rep(NA, 2^parity_n)
for (i in 1:(parity_n - 1)) {
if (i == 1) {
# 1 OR 2
a_or_b <- empty_mat_df[,i] | empty_mat_df[,i+1]
} else if ((i != 1) & (i != 2)) {
# 2 OR 3,
a_or_b <- empty_mat_df[,i] | a_or_b
}
}
a_or_b <- a_or_b * 1
not_a_and_b <- (!a_and_b) * 1
# (A OR B) OR NOT (A AND B)
a_or_b_or_not_a_and_b <- (a_or_b | not_a_and_b) * 1
# write.csv(a_or_b_or_not_a_and_b, file = 'y_truth_table16.csv', row.names = FALSE)
X <- empty_mat_df
Y <- a_or_b_or_not_a_and_b
df <- cbind(Y, X)
net1 <- neuralnet(Y~., df, hidden=2)
net3 <- neuralnet(Y~., df, hidden=2)
plot(net3)
# write.csv(a_or_b_or_not_a_and_b, file = 'y_truth_table16.csv', row.names = FALSE)
X <- empty_mat_df
Y <- a_or_b_or_not_a_and_b
df <- cbind(Y, X)
net3 <- neuralnet(Y~., df, hidden=2)
plot(net3)
y <- predict(net3, X)
sum(round(y) == Y)
2^8
plot(net3)
net3$weights
part_b <- c(1,1,0,0,,0,1,1,0)
part_b <- c(1,1,0,0,0,1,1,0)
part_c <- c(1,0,0,,0,1,0,0,0)
part_c <- c(1,0,0,0,1,0,0,0)
part_d <- c(1,1,1,1,1,1,1,1)
# write.csv(a_or_b_or_not_a_and_b, file = 'y_truth_table16.csv', row.names = FALSE)
X <- empty_mat_df
Y <- a_or_b_or_not_a_and_b
df <- cbind(Y, X)
net3 <- neuralnet(Y~., df, hidden=2)
plot(net3)
y <- predict(net3, X)
sum(round(y) == Y)
2^8
part_a <- c(1,0,1,0,1,0,1,0)
predict(net3, part_a)
X
predict(net3, part_a)
dim(X)
length(part_a)
net3
head(X)
colnames(X)
data.frame(part_a)
t(data.frame(part_a))
data.frame(t(data.frame(part_a)))
part_a <- data.frame(t(data.frame(part_a)))
colnames(part_a) <- colnames(X)
part_a
predict(net3, part_a)
part_a <- c(1,0,1,0,1,0,1,0)
part_a <- data.frame(t(data.frame(part_a)))
colnames(part_a) <- colnames(X)
predict(net3, part_a)
part_b <- c(1,1,0,0,0,1,1,0)
part_b <- data.frame(t(data.frame(part_b)))
colnames(part_b) <- colnames(X)
predict(net3, part_b)
part_c <- c(1,0,0,0,1,0,0,0)
part_c <- data.frame(t(data.frame(part_c)))
colnames(part_c) <- colnames(X)
predict(net3, part_c)
part_d <- c(1,1,1,1,1,1,1,1)
part_d <- data.frame(t(data.frame(part_d)))
colnames(part_d) <- colnames(X)
predict(net3, part_d)
###
parity_n <- 127
rep(1,5)
rep(1,2^127)
rep(1,27)
rep(1,5)
rep(1,2^127)
rep(1,2^27)
rep(1,5)
rep(1,2^27)
rep(1,5)
rep(1,2^127)
rep(1,2^28)
rep(1,2^30)
rep(1,2^127)
2^127
float(2^127)
double(2^127)
as.double(2^127)
rep(1,as.double(2^127))
rep(1,as.integer(2^127))
rep(1,30)
rep(1,2^30)
127/2
memory.limit()
?memory.limit
memory.size(max=FALSE)
2^127
